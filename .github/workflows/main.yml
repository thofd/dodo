name: Build gauguin Kernel

on:
  workflow_dispatch:
  
jobs:
  build:
    name: Build Kernel for gauguin
    runs-on: ubuntu-22.04

    env:
      DEVICE: gauguin
      DEFCONFIG: vendor/gauguin_user_defconfig
      KERNEL_REPO: https://github.com/thofd/neko_kernel_xiaomi_gauguin
      KERNEL_BRANCH: main
      CLANG_VERSION: r416183b
      ANDROID_VERSION: 12
      ZIP_NAME: gauguin-kernel.zip

    steps:
    - name: Checkout kernel source
      uses: actions/checkout@v4

    - name: Clone kernel source manually
      run: |
        git clone --depth=1 --branch $KERNEL_BRANCH $KERNEL_REPO kernel_src

    - name: Restore ccache
      uses: actions/cache@v4
      with:
        path: kernel_src/.ccache
        key: ccache-${{ runner.os }}-${{ env.DEVICE }}-${{ github.sha }}
        restore-keys: |
          ccache-${{ runner.os }}-${{ env.DEVICE }}-

    - name: Pull SUSFS & KPM
      run: |
        cd kernel_src
        git clone --depth=1 https://github.com/ShirkNeko/SukiSU-Ultra susfs
        git clone --depth=1 https://github.com/ni-qiuqiu/apatch_kpm_read kpm
        cp -r susfs/susfs drivers/susfs
        cp -r kpm/include/uapi/linux/kpm.h include/uapi/linux/
        cp -r kpm/kernel/kpm drivers/kpm
        grep -q 'susfs/' drivers/Makefile || echo "obj- += susfs/" >> drivers/Makefile
        grep -q 'kpm/' drivers/Makefile || echo "obj- += kpm/" >> drivers/Makefile

    - name: Setup AOSP Clang
      run: |
        cd kernel_src
        mkdir -p toolchain
        wget -q https://github.com/itsHarshhh/kernel_toolchains/releases/download/aosp-clang-${CLANG_VERSION}/clang.tar.gz
        tar -C toolchain -xzf clang.tar.gz

    - name: Build Kernel
      run: |
        cd kernel_src
        export PATH=$PWD/toolchain/bin:$PATH
        export CCACHE_DIR=$PWD/.ccache
        export USE_CCACHE=1
        ccache -M 2G
        ccache -z
        make O=out ARCH=arm64 $DEFCONFIG
        make -j$(nproc) O=out ARCH=arm64 CC="ccache clang" CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-android- LLVM=1
        ccache -s

    - name: Copy Image
      run: |
        mkdir -p output
        cp kernel_src/out/arch/arm64/boot/Image output/

    - name: Create simple flashable zip
      run: |
        mkdir -p zip/META-INF/com/google/android
        echo "ui_print(\"Flashing gauguin kernel...\");" > zip/META-INF/com/google/android/updater-script
        mkdir -p zip/kernel
        cp output/Image zip/kernel/
        (cd zip && zip -r ../${{ env.ZIP_NAME }} .)

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Kernel-Artifacts
        path: |
          output/Image
          ${{ env.ZIP_NAME }}

    - name: Clean up
      run: |
        rm -rf kernel_src toolchain zip output *.tar.gz
